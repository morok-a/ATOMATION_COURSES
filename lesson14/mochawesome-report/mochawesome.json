{
  "stats": {
    "suites": 6,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2025-04-14T20:49:39.844Z",
    "end": "2025-04-14T20:49:42.939Z",
    "duration": 3095,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "06efabb3-4021-4bf9-9c71-b5edd9667d63",
      "title": "",
      "fullFile": "D:\\Courses\\AUTOMATION_COURSES\\lesson14\\tests\\joke-test.spec.ts",
      "file": "\\tests\\joke-test.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7d32401b-f1ba-4f7c-bc2b-3070fe1990b2",
          "title": "Jokes API Tests",
          "fullFile": "D:\\Courses\\AUTOMATION_COURSES\\lesson14\\tests\\joke-test.spec.ts",
          "file": "\\tests\\joke-test.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Jokes API Tests\"",
              "fullTitle": "Jokes API Tests \"before each\" hook in \"Jokes API Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const configService=new import_config.ConfigService;const apiConfig=configService.getConfig().api.theJokesApi;const fetchApiService=new import_fetch_service.FetchApiService(apiConfig.baseUrl);jokesApi=new import_jokes_api.JokesApi(fetchApiService)",
              "err": {},
              "uuid": "ee7f0609-1d02-49e1-8c87-ac909cd47e0e",
              "parentUUID": "7d32401b-f1ba-4f7c-bc2b-3070fe1990b2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a5523b81-7643-4da6-8d73-3a007e283547",
              "title": "Response status OK",
              "fullFile": "D:\\Courses\\AUTOMATION_COURSES\\lesson14\\tests\\joke-test.spec.ts",
              "file": "\\tests\\joke-test.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a 200 status code",
                  "fullTitle": "Jokes API Tests Response status OK should return a 200 status code",
                  "timedOut": false,
                  "duration": 1343,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response=await jokesApi.getRandomJoke();(0,import_chai.expect)(response[0].status).to.equal(200)",
                  "err": {},
                  "uuid": "614ee8c7-2fe4-44e3-9f7c-f4d0ef203b06",
                  "parentUUID": "a5523b81-7643-4da6-8d73-3a007e283547",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "614ee8c7-2fe4-44e3-9f7c-f4d0ef203b06"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1343,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e21b00a6-2a2e-4efa-90ef-d7d8a5532745",
              "title": "getRandomJoke",
              "fullFile": "D:\\Courses\\AUTOMATION_COURSES\\lesson14\\tests\\joke-test.spec.ts",
              "file": "\\tests\\joke-test.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a random joke",
                  "fullTitle": "Jokes API Tests getRandomJoke should return a random joke",
                  "timedOut": false,
                  "duration": 192,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const[response,joke]=await jokesApi.getRandomJoke();(0,import_chai.expect)(response.ok).to.be.true;(0,import_chai.expect)(joke).to.be.an(\"object\");(0,import_chai.expect)(joke).to.have.property(\"id\");(0,import_chai.expect)(joke).to.have.property(\"setup\");(0,import_chai.expect)(joke).to.have.property(\"punchline\")",
                  "err": {},
                  "uuid": "eb1d14fb-9f69-4e14-b83a-5dbd9b9bd726",
                  "parentUUID": "e21b00a6-2a2e-4efa-90ef-d7d8a5532745",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eb1d14fb-9f69-4e14-b83a-5dbd9b9bd726"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 192,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "072a562d-f8e1-4726-a1c9-9420d5d0dcc4",
              "title": "getType",
              "fullFile": "D:\\Courses\\AUTOMATION_COURSES\\lesson14\\tests\\joke-test.spec.ts",
              "file": "\\tests\\joke-test.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return an array of joke types",
                  "fullTitle": "Jokes API Tests getType should return an array of joke types",
                  "timedOut": false,
                  "duration": 1159,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const[response,types]=await jokesApi.getType();(0,import_chai.expect)(response.ok).to.be.true;(0,import_chai.expect)(types).to.be.an(\"array\").with.length.greaterThan(0)",
                  "err": {},
                  "uuid": "d409c13f-9a41-47da-9316-bae5254dba28",
                  "parentUUID": "072a562d-f8e1-4726-a1c9-9420d5d0dcc4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d409c13f-9a41-47da-9316-bae5254dba28"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1159,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e5556da3-2614-4793-bfad-0d7ba6fa1998",
              "title": "Each type is a string",
              "fullFile": "D:\\Courses\\AUTOMATION_COURSES\\lesson14\\tests\\joke-test.spec.ts",
              "file": "\\tests\\joke-test.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should check that types are string",
                  "fullTitle": "Jokes API Tests Each type is a string should check that types are string",
                  "timedOut": false,
                  "duration": 195,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const[response,types]=await jokesApi.getType();(0,import_chai.expect)(response.ok).to.be.true;types.forEach(type=>{(0,import_chai.expect)(type).to.be.a(\"string\")})",
                  "err": {},
                  "uuid": "b3af2ce4-bc8f-47d3-a792-c579a7d7ef5e",
                  "parentUUID": "e5556da3-2614-4793-bfad-0d7ba6fa1998",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b3af2ce4-bc8f-47d3-a792-c579a7d7ef5e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 195,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "08e6a61b-b90b-47ce-8078-6ab0ceebddcc",
              "title": "getMultipleJokes",
              "fullFile": "D:\\Courses\\AUTOMATION_COURSES\\lesson14\\tests\\joke-test.spec.ts",
              "file": "\\tests\\joke-test.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return an array of jokes",
                  "fullTitle": "Jokes API Tests getMultipleJokes should return an array of jokes",
                  "timedOut": false,
                  "duration": 195,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const[response,jokes]=await jokesApi.getMultipleJokes(2);(0,import_chai.expect)(response.ok).to.be.true;(0,import_chai.expect)(jokes).to.be.an(\"array\")",
                  "err": {},
                  "uuid": "bcd575a3-5a0b-4ec4-8be5-015ecb0e27b6",
                  "parentUUID": "08e6a61b-b90b-47ce-8078-6ab0ceebddcc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bcd575a3-5a0b-4ec4-8be5-015ecb0e27b6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 195,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "[object Object]": true
      },
      "version": "6.2.0"
    }
  }
}